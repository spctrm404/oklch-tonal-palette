$min-size: 6.25rem;
$thumb-size: 3rem;
$track-rad: 0.25rem;
$state-rad: 0.25rem;
$state-size: 2.5rem;
$thumb-shape-size: 1.5rem;
$thumb-shape-size-pressed: 1.75rem;
$thumb-shape-indicator-gap: 0.25rem;
$thumb-shape-indicator-gap-pressed: 0.5rem;
$thumb-shape-indicator-width: 0.25rem;
$thumb-shape-indicator-width-pressed: 0.125rem;
$thumb-shape-indicator-rad: 0.125rem;
$guide-thickness: 0.0625rem;
$guide-rad: 512rem;
$guide-dash: 0.625rem;
$guide-gap: 0.125rem;
$duration: 150ms;
$easing: ease-in;

@mixin dashed-line($dash, $gap, $direction, $color) {
  @if $direction == 'top' {
    background: linear-gradient(
      0deg,
      $color calc($dash / ($dash + $gap) * 100%),
      transparent calc($dash / ($dash + $gap) * 100%)
    );
    background-position: center bottom;
    background-size: 0.0625rem calc($dash + $gap);
  } @else if $direction == 'bottom' {
    background: linear-gradient(
      180deg,
      $color calc($dash / ($dash + $gap) * 100%),
      transparent calc($dash / ($dash + $gap) * 100%)
    );
    background-position: center top;
    background-size: 0.0625rem calc($dash + $gap);
  } @else if $direction == 'left' {
    background: linear-gradient(
      270deg,
      $color calc($dash / ($dash + $gap) * 100%),
      transparent calc($dash / ($dash + $gap) * 100%)
    );
    background-position: right center;
    background-size: calc($dash + $gap) 0.0625rem;
  } @else if $direction == 'right' {
    background: linear-gradient(
      90deg,
      $color calc($dash / ($dash + $gap) * 100%),
      transparent calc($dash / ($dash + $gap) * 100%)
    );
    background-position: left center;
    background-size: calc($dash + $gap) 0.0625rem;
  }
}

.xyslider {
  $root-selector: &;

  display: grid;
  place-items: stretch stretch;
  min-width: $min-size;
  min-height: $min-size;

  &__track {
    $parent-selector: &;

    &::before {
      position: absolute;
      inset: 0;
      display: block;
      content: '';
      background-color: var(--secondary-container-light);
      border-radius: $track-rad;
      opacity: 1;
      transition: background-color $duration $easing, opacity $duration $easing;
      @at-root #{$root-selector}[data-theme='dark'] #{&} {
        background-color: var(--secondary-container-dark);
      }

      @at-root #{$parent-selector}[data-disabled]#{&} {
        background-color: var(--on-surface-light);
        opacity: 0.12;
        @at-root #{$root-selector}[data-theme='dark'] #{&} {
          background-color: var(--on-surface-dark);
        }
      }
    }
  }

  &__guide {
    $parent-selector: &;

    position: absolute;
    transition: transform $duration $easing;
    transform: scale(0%, 0%);

    @at-root #{$root-selector}__track[data-hovered] #{&} {
      transform: scale(100%, 100%);
    }
    @at-root #{$root-selector}__track:has(
          #{$root-selector}__thumb[data-dragging]
        )
        #{&} {
      transform: scale(100%, 100%);
    }

    &--part {
      &-vertical {
        width: $guide-thickness;
      }

      &-horizontal {
        height: $guide-thickness;
      }

      &-top {
        top: 0;
        bottom: calc(100% - var(--pos-y) * 1px);
        left: calc(
          var(--pos-x) * 1px + $thumb-shape-size - 0.5 * $guide-thickness
        );
        background-color: black;
        border-radius: 0 0 $guide-rad $guide-rad;
        transform-origin: bottom center;
        @include dashed-line(
          $guide-dash,
          $guide-gap,
          top,
          var(--outline-light)
        );
        @at-root #{$root-selector}[data-theme='dark'] #{&} {
          @include dashed-line(
            $guide-dash,
            $guide-gap,
            top,
            var(--outline-dark)
          );
        }
      }

      &-bottom {
        top: calc(var(--pos-y) * 1px + $thumb-size);
        bottom: 0;
        left: calc(
          var(--pos-x) * 1px + $thumb-shape-size - 0.5 * $guide-thickness
        );
        border-radius: $guide-rad $guide-rad 0 0;
        transform-origin: top center;
        @include dashed-line(
          $guide-dash,
          $guide-gap,
          bottom,
          var(--outline-light)
        );
        @at-root #{$root-selector}[data-theme='dark'] #{&} {
          @include dashed-line(
            $guide-dash,
            $guide-gap,
            bottom,
            var(--outline-dark)
          );
        }
      }

      &-left {
        top: calc(
          var(--pos-y) * 1px + $thumb-shape-size - 0.5 * $guide-thickness
        );
        right: calc(100% - var(--pos-x) * 1px);
        left: 0;
        border-radius: 0 $guide-rad $guide-rad 0;
        transform-origin: center right;
        @include dashed-line(
          $guide-dash,
          $guide-gap,
          left,
          var(--outline-light)
        );
        @at-root #{$root-selector}[data-theme='dark'] #{&} {
          @include dashed-line(
            $guide-dash,
            $guide-gap,
            left,
            var(--outline-dark)
          );
        }
      }

      &-right {
        top: calc(
          var(--pos-y) * 1px + $thumb-shape-size - 0.5 * $guide-thickness
        );
        right: 0;
        left: calc(var(--pos-x) * 1px + $thumb-size);
        border-radius: $guide-rad 0 0 $guide-rad;
        transform-origin: center left;
        @include dashed-line(
          $guide-dash,
          $guide-gap,
          right,
          var(--outline-light)
        );
        @at-root #{$root-selector}[data-theme='dark'] #{&} {
          @include dashed-line(
            $guide-dash,
            $guide-gap,
            right,
            var(--outline-dark)
          );
        }
      }
    }
  }

  &__thumb {
    $parent-selector: &;

    width: $thumb-size;
    height: $thumb-size;

    &:focus {
      outline: none;
    }

    &::before {
      position: absolute;
      top: 50%;
      left: 50%;
      display: block;
      width: $state-size;
      height: $state-size;
      content: '';
      background-color: var(--primary-light);
      border-radius: $state-rad;
      opacity: 0;
      transition: opacity $duration $easing, transform $duration $easing;
      transform: translate(-50%, -50%) scale(0%, 0%);

      @at-root #{$root-selector}[data-theme='dark'] #{&} {
        background-color: var(--primary-dark);
      }

      @at-root #{$parent-selector}[data-hovered]#{&} {
        opacity: 0.08;
        transform: translate(-50%, -50%) scale(100%, 100%);
      }
      @at-root #{$parent-selector}[data-focused]#{&} {
        opacity: 0.12;
        transform: translate(-50%, -50%) scale(100%, 100%);
      }
      @at-root #{$parent-selector}[focus-visible]#{&} {
        opacity: 0.12;
        transform: translate(-50%, -50%) scale(100%, 100%);
      }
      @at-root #{$parent-selector}[data-dragging]#{&} {
        opacity: 0.12;
        transform: translate(-50%, -50%) scale(100%, 100%);
      }
      @at-root #{$parent-selector}[data-disabled]#{&} {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0%, 0%);
      }
    }

    &__shape {
      position: absolute;
      top: 50%;
      left: 50%;
      width: $thumb-shape-size;
      height: $thumb-shape-size;
      opacity: 1;
      transition: width $duration $easing, height $duration $easing,
        background-color $duration $easing, opacity $duration $easing;
      transform: translate(-50%, -50%);

      @at-root #{$parent-selector}[data-dragging] #{&} {
        width: $thumb-shape-size-pressed;
        height: $thumb-shape-size-pressed;
      }

      &__indicator {
        position: absolute;
        background-color: var(--primary-light);
        border-radius: $thumb-shape-indicator-rad;
        transition: inset $duration $easing, background-color $duration $easing,
          opacity $duration $easing;
        @at-root #{$root-selector}[data-theme='dark'] #{&} {
          background-color: var(--primary-dark);
        }

        &:nth-of-type(1) {
          inset: 0 calc(50% - 0.5 * $thumb-shape-indicator-width)
            calc(50% + 0.5 * $thumb-shape-indicator-gap);
        }

        &:nth-of-type(2) {
          inset: calc(50% - 0.5 * $thumb-shape-indicator-width) 0
            calc(50% - 0.5 * $thumb-shape-indicator-width)
            calc(50% + 0.5 * $thumb-shape-indicator-gap);
        }

        &:nth-of-type(3) {
          inset: calc(50% + 0.5 * $thumb-shape-indicator-gap)
            calc(50% - 0.5 * $thumb-shape-indicator-width) 0;
        }

        &:nth-of-type(4) {
          inset: calc(50% - 0.5 * $thumb-shape-indicator-width)
            calc(50% + 0.5 * $thumb-shape-indicator-gap)
            calc(50% - 0.5 * $thumb-shape-indicator-width) 0;
        }

        @at-root #{$parent-selector}[data-dragging] #{&} {
          &:nth-of-type(1) {
            inset: 0 calc(50% - 0.5 * $thumb-shape-indicator-width-pressed)
              calc(50% + 0.5 * $thumb-shape-indicator-gap-pressed);
          }

          &:nth-of-type(2) {
            inset: calc(50% - 0.5 * $thumb-shape-indicator-width-pressed) 0
              calc(50% - 0.5 * $thumb-shape-indicator-width-pressed)
              calc(50% + 0.5 * $thumb-shape-indicator-gap-pressed);
          }

          &:nth-of-type(3) {
            inset: calc(50% + 0.5 * $thumb-shape-indicator-gap-pressed)
              calc(50% - 0.5 * $thumb-shape-indicator-width-pressed) 0;
          }

          &:nth-of-type(4) {
            inset: calc(50% - 0.5 * $thumb-shape-indicator-width-pressed)
              calc(50% + 0.5 * $thumb-shape-indicator-gap-pressed)
              calc(50% - 0.5 * $thumb-shape-indicator-width-pressed) 0;
          }
        }
        @at-root #{$parent-selector}[data-disabled] #{&} {
          background-color: var(--on-surface-light);
          opacity: 0.38;
          @at-root #{$root-selector}[data-theme='dark'] #{&} {
            background-color: var(--on-surface-dark);
          }
        }
      }
    }
  }
}
